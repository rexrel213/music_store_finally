import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { ChevronLeft, Edit, Clock, MessageSquare, CornerDownRight, Image as ImageIcon, Package, Star, Heart, ShoppingCart } from 'lucide-react';
import StarRating from '../context/StarRating';
import AddToOrder from '../order/AddToOrder';
import AddToFavorite from '../favorite/AddToFavorite';
import Avatar from '../context/Avatar';
import { useAuth } from '../context/AuthContext';
import CommentForm from './comm/CommentForm';
import CommentItem from './comm/CommentItem';

const ProductDetails = () => {
  const { id } = useParams();
  const { currentUser } = useAuth();
  const [product, setProduct] = useState(null);
  const [comments, setComments] = useState([]);
  const [rating, setRating] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedImage, setSelectedImage] = useState(null);
  const BASE_URL = 'https://ruslik.taruman.ru';

  // Функция для загрузки данных о товаре
  const fetchProductData = async () => {
    try {
      const [productRes, commentsRes, ratingRes] = await Promise.all([
        fetch(`${BASE_URL}/products/${id}`),
        fetch(`${BASE_URL}/products/${id}/comments`),
        fetch(`${BASE_URL}/products/${id}/rating`)
      ]);
      
      if (!productRes.ok || !commentsRes.ok || !ratingRes.ok) {
        throw new Error('Failed to load product data');
      }

      const productData = await productRes.json();
      const commentsData = await commentsRes.json();
      const ratingData = await ratingRes.json();

      setProduct(productData);
      setSelectedImage(productData.image);
      setComments(buildCommentTree(commentsData));
      setRating(ratingData.average || 0);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProductData();
  }, [id]);

  // Функция для построения дерева комментариев
  const buildCommentTree = (comments) => {
    const map = {};
    const roots = [];
    comments.forEach(c => { map[c.id] = { ...c, children: [] }; });
    comments.forEach(c => {
      if (c.parent_id) {
        if (map[c.parent_id]) map[c.parent_id].children.push(map[c.id]);
        else roots.push(map[c.id]);
      } else {
        roots.push(map[c.id]);
      }
    });
    return roots;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading product details...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md w-full mx-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
            <div className="text-red-600 mb-4">
              <Package className="h-12 w-12 mx-auto" />
            </div>
            <h2 className="text-xl font-semibold text-red-800 mb-2">Error Loading Product</h2>
            <p className="text-red-700">{error}</p>
            <Link 
              to="/products" 
              className="mt-4 inline-block bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md transition-colors"
            >
              Back to Products
            </Link>
          </div>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md w-full mx-4">
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center">
            <div className="text-yellow-600 mb-4">
              <Package className="h-12 w-12 mx-auto" />
            </div>
            <h2 className="text-xl font-semibold text-yellow-800 mb-2">Product Not Found</h2>
            <p className="text-yellow-700">The product you're looking for doesn't exist.</p>
            <Link 
              to="/products" 
              className="mt-4 inline-block bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-md transition-colors"
            >
              Back to Products
            </Link>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-[#1A2238] mx-auto mb-4"></div>
          <p className="text-gray-600">Загрузка товара...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg shadow-sm">
          <p className="text-red-700">Ошибка: {error}</p>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-yellow-50 border-l-4 border-yellow-500 p-4 rounded-lg shadow-sm">
          <p className="text-yellow-700">Товар не найден</p>
        </div>
      </div>
    );
  }

  const allImages = [
    product.image,
    ...(product.images?.map(img => img.image_path) || [])
  ].filter(Boolean);

  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      <Link 
        to="/products" 
        className="inline-flex items-center text-[#1A2238] hover:text-[#9E1946] transition-all duration-200 mb-8 px-4 py-2 rounded-lg hover:bg-[#1A2238]/5"
      >
        <ChevronLeft className="h-5 w-5 mr-2" />
        Назад к товарам
      </Link>

      <div className="bg-white rounded-xl shadow-lg overflow-hidden mb-12">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 p-8">
          {/* Product Image Gallery */}
          <div className="space-y-4">
            {/* Main Image */}
            <div className="relative w-full h-96 bg-gray-50 rounded-xl overflow-hidden shadow-md">
              {selectedImage ? (
                <div className="relative w-full h-full">
                  <img
                    src={`${BASE_URL}${selectedImage}`}
                    alt={product.title}
                    className="absolute inset-0 w-full h-full object-contain p-4 transition-all duration-500 hover:scale-[1.02]"
                    onError={(e) => {
                      e.target.onerror = null;
                      e.target.src = '/placeholder-product.png';
                    }}
                  />
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-full bg-gradient-to-br from-gray-100 to-gray-200">
                  <ImageIcon className="h-20 w-20 text-gray-300 mb-2" />
                  <span className="text-gray-400 font-medium">Изображение недоступно</span>
                </div>
              )}
            </div>

            {/* Thumbnail Gallery */}
            {allImages.length > 1 && (
              <div className="grid grid-cols-4 gap-3">
                {allImages.map((img, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedImage(img)}
                    className={`relative aspect-square rounded-lg overflow-hidden border-2 transition-all ${
                      selectedImage === img
                        ? 'border-[#1A2238] ring-2 ring-[#1A2238]/20'
                        : 'border-transparent hover:border-gray-300'
                    }`}
                  >
                    <img
                      src={`${BASE_URL}${img}`}
                      alt={`${product.title} миниатюра ${index + 1}`}
                      className="w-full h-full object-cover bg-white"
                      onError={(e) => {
                        e.target.onerror = null;
                        e.target.src = '/placeholder-thumbnail.png';
                      }}
                    />
                    {/* Image counter badge for small screens */}
                    <span className="absolute bottom-1 right-1 bg-black bg-opacity-50 text-white text-xs px-1 rounded sm:hidden">
                      {index + 1}
                    </span>
                  </button>
                ))}
              </div>
            )}
          </div>

          <div className="space-y-6">
            <div>
              <h1 className="text-4xl font-bold text-[#1A2238] font-['Playfair_Display'] mb-4">
                {product.title}
              </h1>
              {/* Interactive rating */}
              < productId={product.id} onRated={fetchCommentsAndRating} />
              <div className="flex items-center space-x-4 mb-6">
                <StarRating rating={rating} />
                <span className="text-lg text-gray-600">
                  ({rating.toFixed(1)})
                </span>
              </div>
              <div className="prose max-w-none text-gray-600">
                {product.description}
              </div>
            </div>

            <div className="border-t border-gray-200 pt-6">
              <div className="flex items-center justify-between mb-6">
                <span className="text-3xl font-bold text-[#9E1946]">
                  {product.price} ₽
                </span>
                {product.old_price && (
                  <span className="text-lg text-gray-500 line-through">
                    {product.old_price} ₽
                  </span>
                )}
              </div>

              <div className="space-y-4">
                <AddToCartButton product={product} />
                <AddToFavoriteButton product={product} />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Comments */}
      <div className="mt-12">
        <h2 className="text-2xl font-bold mb-6">Отзывы</h2>
        <div className="mb-8">
          <CommentForm productId={product.id} onReplySuccess={fetchCommentsAndRating}
            buttonText="Опубликовать отзыв"
            placeholder="Напишите ваш отзыв..."
          />
        </div>
        {comments.length === 0 ? (
          <p className="text-gray-600">Отзывов пока нет.</p>
        ) : (
          <div className="space-y-8">
            {comments.map(comment => (
              <CommentItem
                key={comment.id}
                comment={comment}
                onReplySuccess={fetchCommentsAndRating}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};
export default ProductDetails;